<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Saison;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * retourne le nombre d'utilisateurs actifs
     * @return array
     */
    public function getNombreUserActifs()
    {
        $nbUserArray = $this->createQueryBuilder('u')
            ->select('count(u.id) nb')
            ->where('u.enabled = :actif')
            ->setParameter('actif', true)
            ->getQuery()
            ->getScalarResult();
        return reset($nbUserArray)['nb'];
    }


    /**
     * Retroune un user par sa date de naissance
     * @param \DateTime $naissance
     * @return mixed
     */
    public function findOneByDateNaissance(\DateTime $naissance)
    {
        return $this->createQueryBuilder('u')
            ->where('YEAR(u.dateNaissance) = :annee AND MONTH(u.dateNaissance) = :mois AND DAY(u.dateNaissance) = :jour')
            ->setParameter('annee', $naissance->format('Y'))
            ->setParameter('mois', $naissance->format('m'))
            ->setParameter('jour', $naissance->format('d'))
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * Retourne la reque^te pour obtenir la liste des utilisateurs
     * @param Saison $saison
     * @param array $listeFiltres
     * @return \Doctrine\ORM\Query
     */
    public function getQueryListeUser(Saison $saison, array $listeFiltres)
    {
        // Création de la requête
        $qd = $this->createQueryBuilder('u')
            ->join('u.inscriptions', 'i')
            ->where('i.saison = :saison')
            ->setParameter('saison', $saison);
        // Mise en place du filtre
        if (array_key_exists('text', $listeFiltres) && strlen($listeFiltres['text']) > 0) {
            $qd->andWhere('u.prenom like :text OR u.nom like :text')
                ->setParameter('text', '%'.$listeFiltres['text'].'%');
        }
        if (array_key_exists('typeAdhesion', $listeFiltres) && false === is_null($listeFiltres['typeAdhesion'])) {
            $qd->andWhere('i.typeAdhesion = :typeAdhesion')
                ->setParameter('typeAdhesion', $listeFiltres['typeAdhesion']);
        }
        if (array_key_exists('typeCours', $listeFiltres) && false === is_null($listeFiltres['typeCours'])) {
            $qd->andWhere('i.typeCours = :typeCours')
                ->setParameter('typeCours', $listeFiltres['typeCours']);
        }
        // Exécution de la requête
        return
            $qd->getQuery();
    }
}
